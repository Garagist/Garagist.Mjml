prototype(Garagist.Mjml:Presentation.Page) < prototype(Neos.Fusion:Component) {
    @propTypes {
        compile = ${PropTypes.boolean}
        owa = ${PropTypes.oneOf(['desktop'])}
        dir = ${PropTypes.string}
        lang = ${PropTypes.string}
        backgroundColor = ${PropTypes.string}
        cssClass = ${${PropTypes.anyOf( PropTypes.string, PropTypes.arrayOf( PropTypes.string ) )}}
        width = ${PropTypes.integer}
        title = ${PropTypes.string}
        attributes = ${PropTypes.string}
        preview = ${PropTypes.string}
        breakpoint = ${PropTypes.string}
        head = ${PropTypes.string}
        content = ${PropTypes.string.isRequired}
        debugUrl = ${PropTypes.string}
        trackingPixel = ${PropTypes.string}
    }

    @styleguide.props {
        title = 'Hello World Page'
        preview = 'Hello World'
        content = afx`
            <mj-section>
                <mj-column>
                    <mj-text font-size="20px" color="#F45E43" font-family="helvetica">Hello World</mj-text>
                    <mj-divider border-color="#F45E43"></mj-divider>
                </mj-column>
            </mj-section>
        `
    }

    # Compile the MJML to HTML
    compile = ${!!Configuration.Setting('Garagist.Mjml.apiEndpoint')}

    # If set to "desktop", switch force desktop version for older (self-hosted) version of Outlook.com that doesn't support media queries
    owa = null

    # Used as <html lang=""> attribute
    lang = null

    # Used as <html dir=""> attribute
    dir = null

    # the general background color (color formats)
    backgroundColor = null

    # Class name, added to the root HTML element created
    cssClass = null

    # Email's width in px
    width = 600

    # Defines the document's title that browsers show in the title bar or a page's tab.
    title = null

    # This allows you to set the preview that will be displayed in the inbox of the recipient.
    preview = null

    # https://documentation.mjml.io/#mj-attributes
    attributes = null

    # https://documentation.mjml.io/#mj-html-attributes
    htmlAttributes = null

    # This allows you to control on which breakpoint the layout should go desktop/mobile. Integer value in pixels.
    breakpoint = null

    # The head section of the email
    head = null

    # The content section of the email
    content = null

    # Add the markup for the tracking pixel
    trackingPixel = ${Configuration.Setting('Garagist.Mjml.trackingPixel')}

    # Debug url for logging
    debugUrl = null

    colors = ${Configuration.Setting('Garagist.Mjml.theme.colors')}
    fontSize = ${Configuration.Setting('Garagist.Mjml.theme.fontSize')}
    fontWeight = ${Configuration.Setting('Garagist.Mjml.theme.fontWeight')}
    defaults = ${Configuration.Setting('Garagist.Mjml.theme.defaults')}

    renderer = Neos.Fusion:Http.Message {
        httpResponseHead.headers.'Content-Type' = 'text/html'
        content = afx`
            <mjml
                owa={props.owa}
                lang={props.lang}
                dir={props.dir}
                @process.compile={props.compile ? Mjml.compile(value, props.debugUrl) : value}
            >
                <mj-head>
                    <mj-title @if={props.title} css-class="headline">{props.title}</mj-title>
                    <mj-preview @if={props.preview}>{props.preview}</mj-preview>
                    <mj-attributes>
                        {props.attributes}
                        <Neos.Fusion:Loop
                            @if={Carbon.Array.check(props.defaults)}
                            items={props.defaults}
                        >
                            {'<mj-all '}{itemKey}="{item}"{' />'}
                        </Neos.Fusion:Loop>
                        <Neos.Fusion:Loop
                            @if={Carbon.Array.check(props.fontSize)}
                            items={props.fontSize}
                        >
                            <mj-class @if={!Type.isArray(item)} name={"text-" + itemKey} font-size={item + 'px'} />
                            <mj-class @if={Type.isArray(item)} name={"text-" + itemKey} font-size={item.pixel + 'px'} line-height={item.lineHeight} />
                        </Neos.Fusion:Loop>
                        <Neos.Fusion:Loop
                            @if={Carbon.Array.check(props.fontWeight)}
                            items={props.fontWeight}
                        >
                            <mj-class name={"font-" + itemKey} font-weight={item} />
                        </Neos.Fusion:Loop>
                        <Neos.Fusion:Loop
                            @if={Carbon.Array.check(props.colors)}
                            items={props.colors}
                            itemName="main"
                            itemKey="mainKey"
                        >
                            <mj-class
                                @if={Type.isString(main)}
                                name={"text-" + mainKey}
                                color={main}
                            />
                            <mj-class
                                @if={Type.isString(main)}
                                name={"bg-" + mainKey}
                                background-color={main}
                            />
                            <mj-class
                                @if={Type.isString(main)}
                                name={"container-bg-" + mainKey}
                                container-background-color={main}
                            />
                            <mj-class
                                @if={Type.isString(main)}
                                name={"inner-bg-" + mainKey}
                                inner-background-color={main}
                            />
                            <Neos.Fusion:Loop @if={Carbon.Array.check(main)} items={main}>
                                <mj-class
                                    @if={Type.isString(item) && itemKey != 'DEFAULT'}
                                    name={"text-" + mainKey + "-" + itemKey}
                                    color={item}
                                />
                                <mj-class
                                    @if={Type.isString(item) && itemKey == 'DEFAULT'}
                                    name={"text-" + mainKey}
                                    color={item}
                                />
                                <mj-class
                                    @if={Type.isString(item) && itemKey != 'DEFAULT'}
                                    name={"bg-" + mainKey + "-" + itemKey}
                                    background-color={item}
                                />
                                <mj-class
                                    @if={Type.isString(item) && itemKey == 'DEFAULT'}
                                    name={"bg-" + mainKey}
                                    background-color={item}
                                />
                                <mj-class
                                    @if={Type.isString(item) && itemKey != 'DEFAULT'}
                                    name={"container-bg-" + mainKey + "-" + itemKey}
                                    container-background-color={item}
                                />
                                <mj-class
                                    @if={Type.isString(item) && itemKey == 'DEFAULT'}
                                    name={"container-bg-" + mainKey}
                                    container-background-color={item}
                                />
                                <mj-class
                                    @if={Type.isString(item) && itemKey != 'DEFAULT'}
                                    name={"inner-bg-" + mainKey + "-" + itemKey}
                                    inner-background-color={item}
                                />
                                <mj-class
                                    @if={Type.isString(item) && itemKey == 'DEFAULT'}
                                    name={"inner-bg-" + mainKey}
                                    inner-background-color={item}
                                />
                            </Neos.Fusion:Loop>
                        </Neos.Fusion:Loop>
                    </mj-attributes>

                    <mj-html-attributes @if={props.htmlAttributes && Type.isString(props.htmlAttributes)}>{props.htmlAttributes}</mj-html-attributes>
                    <mj-html-attributes @if={Carbon.Array.check(props.htmlAttributes)}>
                        <Neos.Fusion:Loop items={props.htmlAttributes}>
                            <mj-selector path={itemKey}>
                                <Neos.Fusion:Loop items={item}>
                                    <mj-html-attribute name={itemKey}>{item}</mj-html-attribute>
                                </Neos.Fusion:Loop>
                            </mj-selector>
                        </Neos.Fusion:Loop>
                    </mj-html-attributes>

                    <Neos.Fusion:Loop @if={Carbon.Array.check(props.font)} items={props.font}>
                        <mj-font name={itemKey} href={item} />
                    </Neos.Fusion:Loop>

                    <mj-breakpoint @if={props.breakpoint}>{props.breakpoint}px</mj-breakpoint>
                    {props.head}
                </mj-head>
                <mj-body
                    background-color={props.backgroundColor}
                    css-class={Carbon.String.merge(props.cssClass)}
                    width={props.width ? props.width + 'px' : null}
                >
                    {props.content}
                    <mj-raw @if={props.trackingPixel}>
                        {props.trackingPixel}
                    </mj-raw>
                </mj-body>
            </mjml>
        `
    }
}
